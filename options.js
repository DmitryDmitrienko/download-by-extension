// Generated by CoffeeScript 1.7.1
(function() {
  var Event, ListController, ListModel, ListView, TypeFile;

  TypeFile = (function() {
    function TypeFile(name, atr, ext) {
      this.name = name;
      this.atr = atr;
      this.ext = ext;
    }

    return TypeFile;

  })();

  Event = (function() {
    function Event(sender, listeners) {
      this.sender = sender;
      if (listeners == null) {
        listeners = [];
      }
      this.listeners = listeners;
    }

    Event.prototype.attach = function(listener) {
      return this.listeners.push(listener);
    };

    Event.prototype.notify = function(args) {
      var listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener(this.sender, args));
      }
      return _results;
    };

    return Event;

  })();

  ListModel = (function() {
    function ListModel(items) {
      this.items = items;
      this.itemAdded = new Event(this);
      this.itemRemoved = new Event(this);
      this.listSelect = {
        'empty-type': new TypeFile('', 'empty-type', []),
        'doc-type': new TypeFile(chrome.i18n.getMessage("extDocument"), 'doc-type', ["docx", "pdf", "doc", "txt", "rtf", "odt", "tex", "docm", "ppt", "pptx", "xls", "xlsx"]),
        "torrent-type": new TypeFile(chrome.i18n.getMessage("extTorrent"), "torrent-type", ["torrent"]),
        "pic-type": new TypeFile(chrome.i18n.getMessage("picture"), "pic-type", ["jpg", "jpeg", "png", "gif"]),
        "book-type": new TypeFile(chrome.i18n.getMessage("ebooks"), "book-type", ["djv", "fb2", "fb3", "mobi"]),
        "video-type": new TypeFile(chrome.i18n.getMessage("extVideo"), "video-type", ["mkv", "avi", "3gp", "mov", "bik"]),
        "music-type": new TypeFile(chrome.i18n.getMessage("extMusic"), "music-type", ["mp3", "aac", "wav"]),
        "archives-type": new TypeFile(chrome.i18n.getMessage("extArchives"), "archives-type", ["zip", "rar", "7z", "gzip", "gz", "tar"]),
        "programm-type": new TypeFile(chrome.i18n.getMessage("extProgramm"), "programm-type", ["exe", "com", "deb", "msi", "dmg"]),
        "image-type": new TypeFile(chrome.i18n.getMessage("extImage"), "image-type", ["iso", "adf", "cso", "md0", "md1", "md2", "mdf"])
      };
    }

    ListModel.prototype.getItems = function() {
      return [].concat(this.items);
    };

    ListModel.prototype.addItem = function(item) {
      var object;
      object = {
        'select_index': item,
        'path': ''
      };
      this.items.push(object);
      this.itemAdded.notify({
        item: item
      });
      return this.save();
    };

    ListModel.prototype.removeItemAt = function(index) {
      this.items.splice(index, 1);
      this.itemRemoved.notify();
      return this.save();
    };

    ListModel.prototype.updateSelect = function(index, value) {
      this.items[index].select_index = value;
      return this.save();
    };

    ListModel.prototype.updatePath = function(index, value) {
      this.items[index].path = value;
      return this.save();
    };

    ListModel.prototype.save = function() {
      return chrome.storage.sync.set({
        'DBE_data': {
          'data': this.items,
          'profile': this.listSelect
        }
      }, function() {
        return console.log('saved');
      });
    };

    return ListModel;

  })();

  ListView = (function() {
    function ListView(model, elements) {
      this.model = model;
      this.elements = elements;
      this.listModified = new Event(this);
      this.addButtonClicked = new Event(this);
      this.delButtonClicked = new Event(this);
      this.selectOptionsChange = new Event(this);
      this.pathChange = new Event(this);
      this.saveButtonClicked = new Event(this);
      this.helpButtonCicked = new Event(this);
      this.initEvent();
      this.init();
    }

    ListView.prototype.initEvent = function() {
      this.model.itemAdded.attach((function(_this) {
        return function() {
          return _this.rebuildList();
        };
      })(this));
      this.model.itemRemoved.attach((function(_this) {
        return function() {
          return _this.rebuildList();
        };
      })(this));
      this.elements.list.change((function(_this) {
        return function(e) {
          return _this.listModified.notify({
            index: e.target.selectedIndex
          });
        };
      })(this));
      this.elements.addButton.click((function(_this) {
        return function() {
          return _this.addButtonClicked.notify();
        };
      })(this));
      this.elements.saveButton.click((function(_this) {
        return function() {
          return _this.saveButtonClicked.notify();
        };
      })(this));
      return this.elements.helpButton.click((function(_this) {
        return function() {
          return _this.helpButtonCicked.notify();
        };
      })(this));
    };

    ListView.prototype.init = function() {
      $('#rules').on('click', this.elements.delButton, (function(_this) {
        return function(e) {
          var index;
          index = _this.getIndex(e.currentTarget);
          return _this.delButtonClicked.notify(index);
        };
      })(this));
      $("#rules").on('change', this.elements.selectOptions, (function(_this) {
        return function(e) {
          var index, new_value;
          index = _this.getIndex(e.currentTarget);
          new_value = $(e.currentTarget).children(':selected').attr('id');
          return _this.selectOptionsChange.notify({
            'index': index,
            'value': new_value
          });
        };
      })(this));
      return $('#rules').on('change', this.elements.pathInput, (function(_this) {
        return function(e) {
          var index, new_value;
          index = _this.getIndex(e.currentTarget);
          new_value = $(e.currentTarget).val();
          return _this.pathChange.notify({
            'index': index,
            'value': new_value
          });
        };
      })(this));
    };

    ListView.prototype.getIndex = function(self) {
      return parseInt($(self).parents('tr').attr('id'));
    };

    ListView.prototype.show = function() {
      return this.rebuildList();
    };

    ListView.prototype.rebuildList = function() {
      var html, items, key, list, _results;
      list = this.elements.list;
      list.html('');
      items = this.model.getItems();
      _results = [];
      for (key in items) {
        if (items.hasOwnProperty(key)) {
          html = "<tr id=" + key + ">\n<td>" + (this.createHtmlSelect(items[key].select_index)) + "</td>\n<td><input type=\"text\" class=\"form-control input-dir\" name=\"inputDir\" value=\"" + items[key].path + "\"> </td>\n<td> " + (this.createListExtensions(items[key].select_index)) + "</td>\n<td>\n<button type=\"button\" class=\"del btn btn-default\">\n<span class=\"glyphicon glyphicon-remove\"></span>\n</button>\n</td>\n</tr>";
          _results.push(list.prepend(html));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ListView.prototype.createHtmlSelect = function(typeSelect) {
      var html, key, select;
      return html = "<select class=\"form-control type-file\">\n" + ((function() {
        var _results;
        _results = [];
        for (key in this.model.listSelect) {
          select = ' ';
          if (typeSelect === key) {
            select = ' selected="selected"';
          }
          _results.push("<option id=" + key + select + ">" + this.model.listSelect[key].name + "</option>");
        }
        return _results;
      }).call(this)) + "\n</select>";
    };

    ListView.prototype.createListExtensions = function(typeSelect) {
      return this.model.listSelect[typeSelect].ext.join(', ');
    };

    return ListView;

  })();

  ListController = (function() {
    function ListController(model, view) {
      this.model = model;
      this.view = view;
      this.init();
    }

    ListController.prototype.init = function() {
      this.view.addButtonClicked.attach((function(_this) {
        return function() {
          return _this.addItem();
        };
      })(this));
      this.view.delButtonClicked.attach((function(_this) {
        return function(sender, index) {
          return _this.delItem(index);
        };
      })(this));
      this.view.selectOptionsChange.attach((function(_this) {
        return function(sender, data) {
          _this.updateSelect(data.index, data.value);
          return _this.view.rebuildList();
        };
      })(this));
      this.view.pathChange.attach((function(_this) {
        return function(sender, data) {
          return _this.updatePath(data.index, data.value);
        };
      })(this));
      this.view.saveButtonClicked.attach((function(_this) {
        return function() {
          return _this.saveData();
        };
      })(this));
      return this.view.helpButtonCicked.attach((function(_this) {
        return function() {
          return $("#modalHelp").modal('show');
        };
      })(this));
    };

    ListController.prototype.addItem = function() {
      return this.model.addItem('empty-type');
    };

    ListController.prototype.delItem = function(index) {
      if (index !== -1) {
        $("tr#" + (index.toString())).remove();
        return this.model.removeItemAt(index);
      }
    };

    ListController.prototype.updateSelect = function(index, value) {
      if (index !== -1) {
        return this.model.updateSelect(index, value);
      }
    };

    ListController.prototype.updatePath = function(index, value) {
      if (index !== -1) {
        return this.model.updatePath(index, value);
      }
    };

    ListController.prototype.saveData = function() {
      return this.model.save();
    };

    return ListController;

  })();

  $(document).ready(function() {
    var controller, data, elements, model, view;
    $("#add-rule").text(chrome.i18n.getMessage("extAddRule"));
    $("#saveRule").text(chrome.i18n.getMessage("extSaveRule"));
    $("#table-type").text(chrome.i18n.getMessage("extTypefiles"));
    $("#table-directory").text(chrome.i18n.getMessage("extDirectory"));
    $("#helpButton text").text(chrome.i18n.getMessage("extHelp"));
    $(".container h2").text(chrome.i18n.getMessage("extDesc"));
    $("#myModalLabel").text(chrome.i18n.getMessage("extHelp"));
    $("#buttonCloseModal").text(chrome.i18n.getMessage("extClose"));
    $("#helpMessage").text(chrome.i18n.getMessage("extHelpMessage"));
    $("#extension").text(chrome.i18n.getMessage("extExtension"));
    data = {
      'data': [
        {
          'select_index': 'doc-type',
          'path': 'documents'
        }, {
          'select_index': "torrent-type",
          'path': 'torrents'
        }, {
          'select_index': 'pic-type',
          'path': 'picture'
        }, {
          'select_index': 'book-type',
          'path': 'books'
        }, {
          'select_index': 'video-type',
          'path': 'video'
        }, {
          'select_index': 'music-type',
          'path': 'music'
        }, {
          'select_index': 'archives-type',
          'path': 'archives'
        }, {
          'select_index': 'programm-type',
          'path': 'programms'
        }, {
          'select_index': 'image-type',
          'path': 'image'
        }
      ]
    };
    model = new ListModel(data.data);
    elements = {
      'list': $("#rules"),
      'addButton': $('#add-rule'),
      'delButton': ".del",
      'selectOptions': '.type-file',
      'pathInput': '.input-dir',
      'saveButton': $('#saveRule'),
      'helpButton': $("#helpButton")
    };
    view = new ListView(model, elements);
    controller = new ListController(model, view);
    controller.saveData();
    return view.show();
  });

}).call(this);
